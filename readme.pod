=head1 NAME

WWW::Crawler::Mojo - A web crawling framework for Perl

=head1 SYNOPSIS

    use strict;
    use warnings;
    use utf8;
    use WWW::Crawler::Mojo;
    use 5.10.0;
    
    my $bot = WWW::Crawler::Mojo->new;
    my %count;
    
    $bot->on(res => sub {
        my ($bot, $discover, $queue, $res) = @_;
        
        $count{$res->code}++;
        
        if ($res->code == 404) {
            say sprintf('404 occured! : %s referred by %s',
                        $queue->resolved_uri, $queue->referrer->resolved_uri);
        }
        
        my @disp_seed;
        push(@disp_seed, sprintf('%s:%s', $_, $count{$_})) for (keys %count);
        
        $| = 1;
        print(join(' / ', @disp_seed), ' ' x 30);
        print("\r");
        
        $discover->();
    });
    
    $bot->on(refer => sub {
        my ($bot, $enqueue, $queue, $context) = @_;
        $enqueue->();
    });
    
    $bot->enqueue('http://example.com/');
    $bot->peeping_port(3001);
    $bot->crawl;

=head1 DESCRIPTION

WWW::Crawler::Mojo is a web crawling framework for Perl.

=head1 ATTRIBUTE

WWW::Crawler::Mojo inherits all attributes from Mojo::EventEmitter and
implements the following new ones.

=head2 active_conn

A number of current connections.

=head2 active_conns_per_host

A number of current connections per host.

=head2 depth

A number of max depth to crawl.

=head2 fix

=head2 active_conns_per_host

A hash contains host name for key and last requested timestamp for value.

=head2 max_conn

A number of Max connections.

=head2 max_conn_per_host

A number of Max connections per host.

=head2 peeping_max_length

Max length of peeping API content.

=head2 queues

FIFO array contains WWW::Crawler::Mojo::Queue objects.

=head1 EVENTS

WWW::Crawler::Mojo inherits all events from Mojo::EventEmitter and implements
the following new ones.

=head2 res

Emitted when crawler got response from server.

    $bot->on(res => sub {
        my ($bot, $discover, $queue, $res) = @_;
        if (...) {
            $discover->();
        } else {
            # DO NOTHING
        }
    });

=head2 refer

Emitted when new URI is found. You can enqueue new URIs conditionally with the callback.

    $bot->on(refer => sub {
        my ($bot, $enqueue, $queue, $context) = @_;
        if (...) {
            $enqueue->();
        } elseif (...) {
            $enqueue->(...); # maybe different url
        } else {
            # DO NOTHING
        }
    });

=head2 empty

Emitted when queue length got zero. The length is checked every 5 second.

    $bot->on(refer => sub {
        say "Queue is drained out.";
    });

=head2 error

Emitted when user agent returns no status code for request. Possibly causeed by
network errors or un-responsible servers.

    $bot->on(refer => sub {
        say "error: $_[1]";
    });

=head2 res

Emitted right before crawl is started.

    $bot->on(start => sub {
        my $self = shift;
        ...
    });

Note that server errors such as 404 or 500 cannot be catched with the event.
Consider res event for the use case instead of this.

=head1 METHODS

WWW::Crawler::Mojo inherits all methods from Mojo::EventEmitter and implements
the following new ones.

=head2 crawl

Start crawling loop.

=head2 init

Initialize crawler settings.

=head2 process_queue

Process a queue.

=head2 urls_redirect

Replace the resolved URI of queue and append redirect history into queue

=head2 say_start

Displays starting messages to STDOUT

=head2 peeping_handler

peeping API dispatcher.

=head2 discover

Parses and discovers lins in a web page.

=head2 enqueue

Append a queue with a URI or WWW::Crawler::Mojo::Queue object.

=head2 collect_urls_html

Collects URLs out of HTML.

=head2 collect_urls_css

Collects URLs out of CSS.

=head2 guess_encoding_css

Guesses encoding of CSS

=head2 guess_encoding

Guesses encoding of HTML

=head2 resolve_href

Resolves URLs with a base URL.

=head1 AUTHOR

Sugama Keita, E<lt>sugama@jamadam.comE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright (C) jamadam

This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.

=cut
